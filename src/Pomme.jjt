options
{
	MULTI=true;
	OUTPUT_LANGUAGE="c++";
	STATIC=false;
  	NODE_SCOPE_HOOK=true;
	VISITOR=true;
	NAMESPACE="Pomme";
  	NODE_CLASS="PommeNode";
}

PARSER_BEGIN(PommeLexer)

	void jjtreeOpenNodeScope(PommeNode *n)
	{
	if (n == nullptr) return;
	n->setLineNumber( getToken(1)->beginLine );
	n->setLineColumn( getToken(1)->beginColumn );
	}

	void jjtreeCloseNodeScope(PommeNode *n)
	{
	}

PARSER_END(PommeLexer)

SKIP :
{
	" "
	| "\r"
	| "\t"
	| "\n"
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	| <"/*"(~["/"])*  "*""/" >
}

TOKEN: 
{ 
	<ASSIGNEMENT : "=">  
	| <ADD : "+">  
	| <ADDEQ : "+=">
	| <MINUS : "-"> 
	| <MINUSEQ : "-=">
	| <MULT : "*"> 
	| <MULTEQ : "*=">
	| <DIV : "/"> 
	| <DIVEQ : "/=">
	| <OREQ : "|=">
	| <ANDEQ : "&=">
	| <SHIFTL : "<<">
	| <SHIFTLEQ : "<<=">
	| <SHIFTR : ">>">
	| <SHIFTREQ : ">>=">
	| <INCR : "++"> 
	| <DECR : "--"> 
	| <MODULO : "%">
}

TOKEN:
{
	<CLASS : "class">
	| <ENUM : "enum"> 
	| <TYPEDEF : "typedef">
	| <IF : "if"> 
	| <ELSE : "else"> 
	| <WHILE : "while"> 
	| <PRINT : "print"> 
	| <RETURN : "return"> 
	| <BREAK : "break">
	| <SWITCH : "switch">
	| <CASE : "case">
	| <DEFAULTCASE : "default">
}

TOKEN:
{
	<PARENTL : "("> 
	| <PARENTR : ")"> 
	| <BRACEL : "{"> 
	| <BRACER : "}">
	| <COLON : ":">
	| <SEMICOLON : ";"> 
	| <COMMA : ","> 
	| <POINT : ".">
	| <EXCLAMATION : "!">
	| <TILDE : "~">
}

TOKEN:
{
	<EQ : "=="> 
	| <NEQ : "!=">
	| <GT : ">"> 
	| <GET : ">=">
	| <LT : "<"> 
	| <LET : "<=">
	| <OR : "||"> 
	| <AND : "&&">
}

TOKEN:
{
	<VOID: "void">
	| <CONST: "const">
	| <NATIVE: "native">
	| <EXTENDS: "extends">
	| <MODDED: "modded">
	| <STATIC: "static">
	| <PUBLIC: "public">
	| <PRIVATE: "private">
	| <PROTECTED: "protected">
	| <OVERRIDE: "override">
	| <TRUE : "true">
	| <FALSE : "false">
	| <NULLEXP : "null">
	| <NEWEXP : "new">
	| <INT : (["0"-"9"])+>
	| <IDENTIFIEROPERATOR : ("operator")(<ADDEQ>|<MINUSEQ>|<MULTEQ>|<DIVEQ>|<OREQ>|<ANDEQ>|<SHIFTREQ>|<SHIFTLEQ>|<INCR>|<DECR>|<GT>|<LT>|<GET>|<LET>|<EQ>|<NEQ>|<ADD>|<MINUS>|<MULT>|<DIV>|<MODULO>|"bool")>
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
	| <STRING : "\""(~["\n","\r"])*"\"">
	| <FLOAT : (["0"-"9"])*["."](["0"-"9"])+>
}

SimpleNode* input() : {}
{
	scopes() { return jjtThis; }
}

void ident() #ident:
{Token *t;}
{
   t = <IDENTIFIER> { jjtThis->m_Identifier = t->image; }
}

void identOp() #identOp:
{Token *t;}
{
	t = <IDENTIFIEROPERATOR> { }
}

void pommeInt() #pommeInt:
{Token *t;}
{
   t= <INT> {  jjtThis->m_Value = std::stoull(t->image); }
}

void pommeFloat() #pommeFloat:
{Token *t;}
{
   t= <FLOAT> { jjtThis->m_Value = std::stof(t->image);  }
}

void pommeString() #pommeString:
{Token *t;}
{
   t= <STRING> { jjtThis->m_Value = t->image;  }
}

void scopes() #void :
{}
{
	scope() <SEMICOLON> scopes() #scopes(2)
	| {} #scinil
}

void scope() #void :
{}
{
	LOOKAHEAD(2) classes()
	| globalFunction()
	| enumerate()
	| <TYPEDEF> ident() ident() #pommeTypeDef(2)
}

void classes() #void :
{}
{
	<CLASS> ident() ( 	<BRACEL> decls() <BRACER> #pommeClass(2)
						| <EXTENDS> ident() <BRACEL> decls() <BRACER> #pommeClassChild(3)
					)
	| <MODDED> <CLASS> ident() <BRACEL> decls() <BRACER> #pommeModdedClass(2)
}

void decls() #void :
{}
{
	decl() <SEMICOLON> decls() #decls(2)
	| {} #dnil
}

void decl() #void :
{}
{
	LOOKAHEAD(8) methode()
	| var()
}

void methode() #void :
{}
{
	identfuncs() typemeth() identmeth() <PARENTL> headers() <PARENTR> <BRACEL> instrs() <BRACER> #pommeMethode(5)
	| <NATIVE> pommeStatic() visibility() typemeth() identmeth() <PARENTL> headers() <PARENTR> #pommeMethodeNative(5)
}

void identfuncs() #void :
{}
{
	pommeStatic() visibility() pommeOverride() #identFuncs(3)
}

void pommeStatic() #void :
{}
{
	<STATIC> #pommeStatic
	| {} #snil
}

void visibility() #void :
{}
{
	<PUBLIC> #pommePublic
	| <PRIVATE> #pommePrivate
	| <PROTECTED> #pommeProtected
	| {} #vinil
}

void pommeOverride() #void :
{}
{
	<OVERRIDE> #pommeOverride
	| {} #onil
}

void enumerate() #void :
{}
{
	<ENUM> ident() 	( 	<BRACEL> declenums() <BRACER> #pommeEnum(2)
						| <EXTENDS> ident() <BRACEL> declenums() <BRACER> #pommeExtendsEnum(3)
					)
	| <MODDED> <ENUM> ident() <BRACEL> declenums() <BRACER> #pommeModdedEnum(2)
}

void declenums() #void :
{}
{
	declenum() 	( 	<COMMA> declenums() #declenums(2)
					| {} 
				)
	| {} #ennil
}

void declenum() #void :
{}
{
	ident() ( 	<ASSIGNEMENT> pommeInt() #enumassign(2)
				| {} #enumdefault(1)
			)
}

void globalFunction() #void :
{}
{
	typemeth() ident() <PARENTL> headers() <PARENTR> <BRACEL> instrs() <BRACER> #pommeGlobalFunction(4)
	| <NATIVE> typemeth() ident() <PARENTL> headers() <PARENTR> #pommeGlobalFunctionNative(3)
}

void instrs() #void :
{}
{
	instr() <SEMICOLON> instrs() #instrs(2)
	| {}	#inil
}

void instr() #void :
{}
{
	LOOKAHEAD(2) var()
	| <INCR> listacces() #incrementPre(1)
	| <DECR> listacces() #decrementPre(1)
	| <RETURN> exp() #pommeReturn(1)
	| <WHILE> <PARENTL> exp() <PARENTR> <BRACEL> instrs() <BRACER> #pommeWhile(2)
	| <BREAK> #pommeBreak
	| <IF> <PARENTL> exp() <PARENTR> <BRACEL> instrs() <BRACER> pommeElse() #pommeIf(3)
	| <PRINT> <PARENTL> exp() <PARENTR> #pommePrint(1)
	| <SWITCH> <PARENTL> exp() <PARENTR> <BRACEL> listcases() <BRACER> #pommeSwitch(2)
	| listacces() ( <ASSIGNEMENT> exp() #assignement(2) 
					| <ADDEQ> exp() #addeq(2) 
					| <MINUSEQ> exp() #minuseq(2) 
					| <DIVEQ> exp() #diveq(2) 
					| <MULTEQ> exp() #multeq(2) 
					| <OREQ> exp() #oreq(2) 
					| <ANDEQ> exp() #andeq(2) 
					| <SHIFTLEQ> exp() #shiftleq(2)
					| <SHIFTREQ> exp() #shiftreq(2)
					| <INCR> #incrementPost(1)
					| <DECR> #decrementPost(1)
					| {}
				)
}

void listcases() #void :
{}
{
	pommecase() listcases() #pommeCases(2)
	| <DEFAULTCASE> <COLON> <BRACEL> instrs() <BRACER> #pommeDefault(1)
	| {} #swinil
}

void pommecase() #void :
{}
{
	<CASE> exp() <COLON> <BRACEL> instrs() <BRACER> #pommeCase(2)
}

void pommeElse() #void :
{}
{
  	<ELSE> <BRACEL> instrs() <BRACER>
	| {} #inil
}

void listexp() #void :
{}
{
  	exp() listexpP() #listexp(2)
	| {} #exnil
}

void listexpP() #void :
{}
{
  	<COMMA> exp() listexpP() #listexp(2)
	| {} #exnil
}

void var() #void :
{}
{
	type() ident() vexp() #pommeVariable(3)
	| <CONST> type() ident() vexp() #pommeConstant(3)
}

void vexp() #void :
{}
{
	<ASSIGNEMENT> exp()
	| {}	#omega
}

void headers() #void :
{}
{
   	header() headersP()	#headers(2)
 	| {} #enil
}

void headersP() #void :
{}
{
  	<COMMA> header() headersP()	#headers(2)
 	| {} #enil
}


void header() #void :
{}
{
  	type() ident() #header(2)
}

void typemeth() #void :
{}
{
	<VOID> #voidType
  	| type()
}

void identmeth() #void :
{}
{
	ident()
	| identOp()
	| <TILDE> ident() #pommeDestructor(1)
}

void type() #void:
{}
{
	ident()
}

void exp() #void :
{}
{
 	exp1() expP()
}

void expP() #void :
{}
{
  	<AND> exp1() expP() #pommeAnd(2)
  	| <OR> exp1() expP() #pommeOr(2)
  	| {} 
}

void exp1() #void :
{}
{
	exp2() exp1P()
}

void exp1P() #void :
{}
{
  	<EQ> exp2() exp1P() #pommeEQ(2)
	| <NEQ> exp2() exp1P() #pommeNEQ(2)
	| <GT> exp2() exp1P() #pommeGT(2)
	| <GET> exp2() exp1P() #pommeGET(2)
	| <LT> exp2() exp1P() #pommeLT(2)
	| <LET> exp2() exp1P() #pommeLET(2)
  	| {} 
}

void exp2() #void :
{}
{
	terme() exp2P()
}

void exp2P() #void :
{}
{
  	<ADD> terme() exp2P() #pommeAdd(2)
	| <MINUS> terme() exp2P() #pommeMinus(2)
	| <SHIFTR> terme() exp2P() #pommeShiftR(2)
	| <SHIFTL> terme() exp2P() #pommeShiftL(2)
  	| {} 
}

void terme() #void :
{}
{
	fact2() termeP()
}

void termeP() #void :
{}
{
  	<MULT> fact2() termeP() #pommeMult(2)
	| <DIV> fact2() termeP() #pommeDiv(2)
	| <MODULO> fact2() termeP() #pommeModulo(2)
  	| {} 
}

void fact2() #void :
{}
{
	LOOKAHEAD(3) fact()
	| <PARENTL> exp() <PARENTR>
	| <MINUS> fact2() #pommeUnary(1)
	| <EXCLAMATION> fact2() #pommeNot(1)
	| <TILDE> fact2() #pommeTilde(1)
}

void fact() #void :
{}
{
	<NEWEXP> ident() <PARENTL> listexp() <PARENTR> #pommeNew(2) 
	| listacces()
	| <TRUE> #pommeTrue
	| <FALSE> #pommeFalse
	| number()
	| pommeString()
	| <NULLEXP> #pommeNull
}

void listacces() #void :
{}
{
  	access() listaccesP() #listacces(2)
}

void listaccesP() #void :
{}
{
	<POINT> access() listaccesP() #listacces(2)
	| {} #acnil
}

void access() #void :
{}
{
	LOOKAHEAD(2) identmeth() <PARENTL> listexp() <PARENTR> #accessMethode(2)
	| ident()
}

void number() #void :
{}
{
	pommeInt()
	| pommeFloat()
}