void func()
{
    int a;
    a = !;
    a.b = !;
    a[!] = !;

    a += !;
    a.b += !;
    a[!] += !;

    a -= !;
    a.b -= !;
    a[!] -= !;

    a /= !;
    a.b /= !;
    a[!] /= !;

    a *= !;
    a.b *= !;
    a[!] *= !;

    a |= !;
    a.b |= !;
    a[!] |= !;

    a &= !;
    a.b &= !;
    a[!] &= !;

    a <<= !;
    a.b <<= !;
    a[!] <<= !;

    a >>= !;
    a.b >>= !;
    a[!] >>= !;

    a++;
    ++a;

    d();
    d(!, !);
    b.c();
    b.c(!, !, !);

    return !;

    while (!) 
    {
        int a;
        break;
    };

    if (!)
    {
        int a;
    }
    else
    {
        int b;
    };

    if (!)
    {
        int x;
    };

    switch (a) 
    {
        case !:
        {
            break;
        }

        case !:
        {
            break;
        }

        default:
        {
            break;
        }
    };

    switch (a.b) 
    {

    };

    switch (b()) 
    {

    };

    switch (a.b()) 
    {

    };

    print(!);
};

test func2(float a, int c)
{
    int d;
    int e = !;
    const int f;
    const int g[!];
    const int h = !;
    int b[!];
};

native void func();
native void func2(int a, int b);

enum testenum
{
    FIRST,
    SECOND,
    THIRD = 50,
};

modded enum testenum 
{
    FOUR,
};

enum utest extends testenum
{
    FIVE = 5,
    SIX,
};

class testclass 
{
    int d;
    int e = !;
    const int f;
    const int g[!];
    const int h = !;
    int b[!];

    void func()
    {
        int a;
    };

    private void func2()
    {
        int a;
    };

    protected void func2()
    {
        int a;
    };

    static protected void func2()
    {
        int a;
    };

    override void func()
    {
        int a;
    };

    native void foo();
    native void foo(int a);
    native static void aa();
    native private void bb();
};

modded class A
{
    void functio2(int a)
    {
        int b;
    };
};

class B extends A
{
    native void functio();
};