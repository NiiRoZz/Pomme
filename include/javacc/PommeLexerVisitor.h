/* Generated By:JavaCC: Do not edit this line. PommeLexerVisitor.h Version 7.0.10 */
#ifndef POMMELEXERVISITOR_H
#define POMMELEXERVISITOR_H

#include "JavaCC.h"
#include "PommeLexerTree.h"
namespace Pomme {
class PommeLexerVisitor
{
  public:
  virtual void  visit(SimpleNode *node, void * data) = 0;
  virtual void  visit(ASTPommeInput *node, void * data) = 0;
  virtual void  visit(ASTPommeIdent *node, void * data) = 0;
  virtual void  visit(ASTPommeIdentOp *node, void * data) = 0;
  virtual void  visit(ASTPommeInt *node, void * data) = 0;
  virtual void  visit(ASTPommeFloat *node, void * data) = 0;
  virtual void  visit(ASTPommeString *node, void * data) = 0;
  virtual void  visit(ASTPommeScopes *node, void * data) = 0;
  virtual void  visit(ASTPommeScinil *node, void * data) = 0;
  virtual void  visit(ASTPommeTypeDef *node, void * data) = 0;
  virtual void  visit(ASTPommeClass *node, void * data) = 0;
  virtual void  visit(ASTPommeClassChild *node, void * data) = 0;
  virtual void  visit(ASTPommeModdedClass *node, void * data) = 0;
  virtual void  visit(ASTPommeDecls *node, void * data) = 0;
  virtual void  visit(ASTPommeDnil *node, void * data) = 0;
  virtual void  visit(ASTPommeDestructor *node, void * data) = 0;
  virtual void  visit(ASTPommeMethodeNative *node, void * data) = 0;
  virtual void  visit(ASTPommeConstructor *node, void * data) = 0;
  virtual void  visit(ASTPommeVarDecls *node, void * data) = 0;
  virtual void  visit(ASTPommeMethode *node, void * data) = 0;
  virtual void  visit(ASTPommeIdentFuncs *node, void * data) = 0;
  virtual void  visit(ASTPommeStatic *node, void * data) = 0;
  virtual void  visit(ASTPommeSnil *node, void * data) = 0;
  virtual void  visit(ASTPommePublic *node, void * data) = 0;
  virtual void  visit(ASTPommePrivate *node, void * data) = 0;
  virtual void  visit(ASTPommeProtected *node, void * data) = 0;
  virtual void  visit(ASTPommeVinil *node, void * data) = 0;
  virtual void  visit(ASTPommeOverride *node, void * data) = 0;
  virtual void  visit(ASTPommeOnil *node, void * data) = 0;
  virtual void  visit(ASTPommeEnum *node, void * data) = 0;
  virtual void  visit(ASTPommeExtendsEnum *node, void * data) = 0;
  virtual void  visit(ASTPommeModdedEnum *node, void * data) = 0;
  virtual void  visit(ASTPommeDeclEnums *node, void * data) = 0;
  virtual void  visit(ASTPommeEnnil *node, void * data) = 0;
  virtual void  visit(ASTPommeEnumAssign *node, void * data) = 0;
  virtual void  visit(ASTPommeEnumDefault *node, void * data) = 0;
  virtual void  visit(ASTPommeGlobalFunction *node, void * data) = 0;
  virtual void  visit(ASTPommeGlobalFunctionNative *node, void * data) = 0;
  virtual void  visit(ASTPommeInstrs *node, void * data) = 0;
  virtual void  visit(ASTPommeInil *node, void * data) = 0;
  virtual void  visit(ASTPommeIncrPre *node, void * data) = 0;
  virtual void  visit(ASTPommeDecrPre *node, void * data) = 0;
  virtual void  visit(ASTPommeDelete *node, void * data) = 0;
  virtual void  visit(ASTPommeReturn *node, void * data) = 0;
  virtual void  visit(ASTPommeWhile *node, void * data) = 0;
  virtual void  visit(ASTPommeBreak *node, void * data) = 0;
  virtual void  visit(ASTPommeIf *node, void * data) = 0;
  virtual void  visit(ASTPommePrint *node, void * data) = 0;
  virtual void  visit(ASTPommeSwitch *node, void * data) = 0;
  virtual void  visit(ASTPommeAssign *node, void * data) = 0;
  virtual void  visit(ASTPommeAddEq *node, void * data) = 0;
  virtual void  visit(ASTPommeMinusEq *node, void * data) = 0;
  virtual void  visit(ASTPommeDivEq *node, void * data) = 0;
  virtual void  visit(ASTPommeMultEq *node, void * data) = 0;
  virtual void  visit(ASTPommeOrEq *node, void * data) = 0;
  virtual void  visit(ASTPommeAndEq *node, void * data) = 0;
  virtual void  visit(ASTPommeShiftLEq *node, void * data) = 0;
  virtual void  visit(ASTPommeShiftREq *node, void * data) = 0;
  virtual void  visit(ASTPommeIncrPost *node, void * data) = 0;
  virtual void  visit(ASTPommeDecrPost *node, void * data) = 0;
  virtual void  visit(ASTPommeCases *node, void * data) = 0;
  virtual void  visit(ASTPommeDefault *node, void * data) = 0;
  virtual void  visit(ASTPommeSwinil *node, void * data) = 0;
  virtual void  visit(ASTPommeCase *node, void * data) = 0;
  virtual void  visit(ASTPommeListExp *node, void * data) = 0;
  virtual void  visit(ASTPommeExnil *node, void * data) = 0;
  virtual void  visit(ASTPommeVariable *node, void * data) = 0;
  virtual void  visit(ASTPommeConstant *node, void * data) = 0;
  virtual void  visit(ASTPommeOmega *node, void * data) = 0;
  virtual void  visit(ASTPommeHeaders *node, void * data) = 0;
  virtual void  visit(ASTPommeEnil *node, void * data) = 0;
  virtual void  visit(ASTPommeConstHeader *node, void * data) = 0;
  virtual void  visit(ASTPommeHeader *node, void * data) = 0;
  virtual void  visit(ASTPommeVoidType *node, void * data) = 0;
  virtual void  visit(ASTPommeAnd *node, void * data) = 0;
  virtual void  visit(ASTPommeOr *node, void * data) = 0;
  virtual void  visit(ASTPommeEQ *node, void * data) = 0;
  virtual void  visit(ASTPommeNEQ *node, void * data) = 0;
  virtual void  visit(ASTPommeGT *node, void * data) = 0;
  virtual void  visit(ASTPommeGET *node, void * data) = 0;
  virtual void  visit(ASTPommeLT *node, void * data) = 0;
  virtual void  visit(ASTPommeLET *node, void * data) = 0;
  virtual void  visit(ASTPommeAdd *node, void * data) = 0;
  virtual void  visit(ASTPommeMinus *node, void * data) = 0;
  virtual void  visit(ASTPommeShiftR *node, void * data) = 0;
  virtual void  visit(ASTPommeShiftL *node, void * data) = 0;
  virtual void  visit(ASTPommeMult *node, void * data) = 0;
  virtual void  visit(ASTPommeDiv *node, void * data) = 0;
  virtual void  visit(ASTPommeModulo *node, void * data) = 0;
  virtual void  visit(ASTPommeUnary *node, void * data) = 0;
  virtual void  visit(ASTPommeNot *node, void * data) = 0;
  virtual void  visit(ASTPommeTilde *node, void * data) = 0;
  virtual void  visit(ASTPommeNew *node, void * data) = 0;
  virtual void  visit(ASTPommeTrue *node, void * data) = 0;
  virtual void  visit(ASTPommeFalse *node, void * data) = 0;
  virtual void  visit(ASTPommeNull *node, void * data) = 0;
  virtual void  visit(ASTPommeListAccess *node, void * data) = 0;
  virtual void  visit(ASTPommeAccessTab *node, void * data) = 0;
  virtual void  visit(ASTPommeListAccessP *node, void * data) = 0;
  virtual void  visit(ASTPommeAcnil *node, void * data) = 0;
  virtual void  visit(ASTPommeAccessMethode *node, void * data) = 0;
  virtual ~PommeLexerVisitor() { }
};
class PommeLexerDefaultVisitor : public PommeLexerVisitor {
public:
  virtual void  defaultVisit(SimpleNode *node, void * data) = 0;
  virtual void  visit(SimpleNode *node, void * data) {
    defaultVisit(node, data);
}
  virtual void  visit(ASTPommeInput *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIdent *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIdentOp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeInt *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeFloat *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeString *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeScopes *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeScinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeTypeDef *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeClassChild *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeModdedClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDecls *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDestructor *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMethodeNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeConstructor *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeVarDecls *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMethode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIdentFuncs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeStatic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeSnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommePublic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommePrivate *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeProtected *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeVinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeOverride *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeOnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeExtendsEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeModdedEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDeclEnums *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEnnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEnumAssign *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEnumDefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeGlobalFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeGlobalFunctionNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeInstrs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeInil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIncrPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDecrPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDelete *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeReturn *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeWhile *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeBreak *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIf *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommePrint *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeSwitch *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAssign *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAddEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMinusEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDivEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMultEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeOrEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAndEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeShiftLEq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeShiftREq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeIncrPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDecrPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeCases *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeSwinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeCase *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeListExp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeExnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeVariable *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeConstant *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeOmega *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeHeaders *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeConstHeader *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeHeader *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeVoidType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAnd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeOr *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeNEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeGT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeGET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeLT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeLET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAdd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMinus *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeShiftR *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeShiftL *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeMult *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeDiv *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeModulo *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeUnary *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeNot *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeTilde *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeNew *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeTrue *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeFalse *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeNull *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeListAccess *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAccessTab *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeListAccessP *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAcnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTPommeAccessMethode *node, void * data) {
    defaultVisit(node, data);
  }
  ~PommeLexerDefaultVisitor() { }
};
}
#endif
/* JavaCC - OriginalChecksum=0c421a733281c91d21a308221b49f097 (do not edit this line) */
