/* Generated By:JavaCC: Do not edit this line. PommeLexerVisitor.h Version 7.0.10 */
#ifndef POMMELEXERVISITOR_H
#define POMMELEXERVISITOR_H

#include "JavaCC.h"
#include "PommeLexerTree.h"
namespace Pomme {
class PommeLexerVisitor
{
  public:
  virtual void  visit(SimpleNode *node, void * data) = 0;
  virtual void  visit(ASTinput *node, void * data) = 0;
  virtual void  visit(ASTident *node, void * data) = 0;
  virtual void  visit(ASTidentOp *node, void * data) = 0;
  virtual void  visit(ASTpommeInt *node, void * data) = 0;
  virtual void  visit(ASTpommeFloat *node, void * data) = 0;
  virtual void  visit(ASTpommeString *node, void * data) = 0;
  virtual void  visit(ASTscopes *node, void * data) = 0;
  virtual void  visit(ASTscinil *node, void * data) = 0;
  virtual void  visit(ASTpommeTypeDef *node, void * data) = 0;
  virtual void  visit(ASTpommeClass *node, void * data) = 0;
  virtual void  visit(ASTpommeClassChild *node, void * data) = 0;
  virtual void  visit(ASTpommeModdedClass *node, void * data) = 0;
  virtual void  visit(ASTdecls *node, void * data) = 0;
  virtual void  visit(ASTdnil *node, void * data) = 0;
  virtual void  visit(ASTpommeMethode *node, void * data) = 0;
  virtual void  visit(ASTpommeMethodeNative *node, void * data) = 0;
  virtual void  visit(ASTidentFuncs *node, void * data) = 0;
  virtual void  visit(ASTpommeStatic *node, void * data) = 0;
  virtual void  visit(ASTsnil *node, void * data) = 0;
  virtual void  visit(ASTpommePublic *node, void * data) = 0;
  virtual void  visit(ASTpommePrivate *node, void * data) = 0;
  virtual void  visit(ASTpommeProtected *node, void * data) = 0;
  virtual void  visit(ASTvinil *node, void * data) = 0;
  virtual void  visit(ASTpommeOverride *node, void * data) = 0;
  virtual void  visit(ASTonil *node, void * data) = 0;
  virtual void  visit(ASTpommeEnum *node, void * data) = 0;
  virtual void  visit(ASTpommeExtendsEnum *node, void * data) = 0;
  virtual void  visit(ASTpommeModdedEnum *node, void * data) = 0;
  virtual void  visit(ASTdeclenums *node, void * data) = 0;
  virtual void  visit(ASTennil *node, void * data) = 0;
  virtual void  visit(ASTenumassign *node, void * data) = 0;
  virtual void  visit(ASTenumdefault *node, void * data) = 0;
  virtual void  visit(ASTpommeGlobalFunction *node, void * data) = 0;
  virtual void  visit(ASTpommeGlobalFunctionNative *node, void * data) = 0;
  virtual void  visit(ASTinstrs *node, void * data) = 0;
  virtual void  visit(ASTinil *node, void * data) = 0;
  virtual void  visit(ASTincrementPre *node, void * data) = 0;
  virtual void  visit(ASTdecrementPre *node, void * data) = 0;
  virtual void  visit(ASTpommeReturn *node, void * data) = 0;
  virtual void  visit(ASTpommeWhile *node, void * data) = 0;
  virtual void  visit(ASTpommeBreak *node, void * data) = 0;
  virtual void  visit(ASTpommeIf *node, void * data) = 0;
  virtual void  visit(ASTpommePrint *node, void * data) = 0;
  virtual void  visit(ASTpommeSwitch *node, void * data) = 0;
  virtual void  visit(ASTassignement *node, void * data) = 0;
  virtual void  visit(ASTaddeq *node, void * data) = 0;
  virtual void  visit(ASTminuseq *node, void * data) = 0;
  virtual void  visit(ASTdiveq *node, void * data) = 0;
  virtual void  visit(ASTmulteq *node, void * data) = 0;
  virtual void  visit(ASToreq *node, void * data) = 0;
  virtual void  visit(ASTandeq *node, void * data) = 0;
  virtual void  visit(ASTshiftleq *node, void * data) = 0;
  virtual void  visit(ASTshiftreq *node, void * data) = 0;
  virtual void  visit(ASTincrementPost *node, void * data) = 0;
  virtual void  visit(ASTdecrementPost *node, void * data) = 0;
  virtual void  visit(ASTpommeCases *node, void * data) = 0;
  virtual void  visit(ASTpommeDefault *node, void * data) = 0;
  virtual void  visit(ASTswinil *node, void * data) = 0;
  virtual void  visit(ASTpommeCase *node, void * data) = 0;
  virtual void  visit(ASTlistexp *node, void * data) = 0;
  virtual void  visit(ASTexnil *node, void * data) = 0;
  virtual void  visit(ASTpommeVariable *node, void * data) = 0;
  virtual void  visit(ASTpommeConstant *node, void * data) = 0;
  virtual void  visit(ASTpommeArray *node, void * data) = 0;
  virtual void  visit(ASTomega *node, void * data) = 0;
  virtual void  visit(ASTheaders *node, void * data) = 0;
  virtual void  visit(ASTenil *node, void * data) = 0;
  virtual void  visit(ASTheader *node, void * data) = 0;
  virtual void  visit(ASTvoidType *node, void * data) = 0;
  virtual void  visit(ASTpommeDestructor *node, void * data) = 0;
  virtual void  visit(ASTpommeAnd *node, void * data) = 0;
  virtual void  visit(ASTpommeOr *node, void * data) = 0;
  virtual void  visit(ASTpommeEQ *node, void * data) = 0;
  virtual void  visit(ASTpommeNEQ *node, void * data) = 0;
  virtual void  visit(ASTpommeGT *node, void * data) = 0;
  virtual void  visit(ASTpommeGET *node, void * data) = 0;
  virtual void  visit(ASTpommeLT *node, void * data) = 0;
  virtual void  visit(ASTpommeLET *node, void * data) = 0;
  virtual void  visit(ASTpommeAdd *node, void * data) = 0;
  virtual void  visit(ASTpommeMinus *node, void * data) = 0;
  virtual void  visit(ASTpommeShiftR *node, void * data) = 0;
  virtual void  visit(ASTpommeShiftL *node, void * data) = 0;
  virtual void  visit(ASTpommeMult *node, void * data) = 0;
  virtual void  visit(ASTpommeDiv *node, void * data) = 0;
  virtual void  visit(ASTpommeModulo *node, void * data) = 0;
  virtual void  visit(ASTpommeUnary *node, void * data) = 0;
  virtual void  visit(ASTpommeNot *node, void * data) = 0;
  virtual void  visit(ASTpommeTilde *node, void * data) = 0;
  virtual void  visit(ASTpommeNew *node, void * data) = 0;
  virtual void  visit(ASTpommeTrue *node, void * data) = 0;
  virtual void  visit(ASTpommeFalse *node, void * data) = 0;
  virtual void  visit(ASTpommeNull *node, void * data) = 0;
  virtual void  visit(ASTlistacces *node, void * data) = 0;
  virtual void  visit(ASTacnil *node, void * data) = 0;
  virtual void  visit(ASTaccessTab *node, void * data) = 0;
  virtual void  visit(ASTaccessMethode *node, void * data) = 0;
  virtual ~PommeLexerVisitor() { }
};
class PommeLexerDefaultVisitor : public PommeLexerVisitor {
public:
  virtual void  defaultVisit(SimpleNode *node, void * data) = 0;
  virtual void  visit(SimpleNode *node, void * data) {
    defaultVisit(node, data);
}
  virtual void  visit(ASTinput *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTident *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTidentOp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeInt *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeFloat *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeString *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTscopes *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTscinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeTypeDef *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeClassChild *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeModdedClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdecls *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeMethode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeMethodeNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTidentFuncs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeStatic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTsnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommePublic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommePrivate *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeProtected *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTvinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeOverride *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTonil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeExtendsEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeModdedEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdeclenums *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTennil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTenumassign *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTenumdefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeGlobalFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeGlobalFunctionNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTinstrs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTincrementPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdecrementPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeReturn *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeWhile *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeBreak *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeIf *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommePrint *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeSwitch *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTassignement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTaddeq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTminuseq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdiveq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTmulteq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASToreq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTandeq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTshiftleq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTshiftreq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTincrementPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTdecrementPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeCases *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeDefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTswinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeCase *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTlistexp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTexnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeVariable *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeConstant *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeArray *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTomega *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTheaders *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTenil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTheader *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTvoidType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeDestructor *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeAnd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeOr *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeNEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeGT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeGET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeLT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeLET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeAdd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeMinus *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeShiftR *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeShiftL *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeMult *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeDiv *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeModulo *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeUnary *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeNot *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeTilde *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeNew *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeTrue *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeFalse *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTpommeNull *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTlistacces *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTacnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTaccessTab *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(ASTaccessMethode *node, void * data) {
    defaultVisit(node, data);
  }
  ~PommeLexerDefaultVisitor() { }
};
}
#endif
/* JavaCC - OriginalChecksum=cc2e28e4747ff41a11404c4b41ce1e91 (do not edit this line) */
