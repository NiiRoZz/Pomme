/* Generated By:JavaCC: Do not edit this line. PommeLexerVisitor.h Version 7.0.10 */
#ifndef POMMELEXERVISITOR_H
#define POMMELEXERVISITOR_H

#include "JavaCC.h"
#include "PommeLexerTree.h"
namespace Pomme {
class PommeLexerVisitor
{
  public:
  virtual void  visit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const ASTinput *node, void * data) = 0;
  virtual void  visit(const ASTident *node, void * data) = 0;
  virtual void  visit(const ASTidentOp *node, void * data) = 0;
  virtual void  visit(const ASTpommeInt *node, void * data) = 0;
  virtual void  visit(const ASTpommeFloat *node, void * data) = 0;
  virtual void  visit(const ASTpommeString *node, void * data) = 0;
  virtual void  visit(const ASTscopes *node, void * data) = 0;
  virtual void  visit(const ASTscinil *node, void * data) = 0;
  virtual void  visit(const ASTpommeTypeDef *node, void * data) = 0;
  virtual void  visit(const ASTpommeClass *node, void * data) = 0;
  virtual void  visit(const ASTpommeClassChild *node, void * data) = 0;
  virtual void  visit(const ASTpommeModdedClass *node, void * data) = 0;
  virtual void  visit(const ASTdecls *node, void * data) = 0;
  virtual void  visit(const ASTdnil *node, void * data) = 0;
  virtual void  visit(const ASTpommeMethode *node, void * data) = 0;
  virtual void  visit(const ASTpommeMethodeNative *node, void * data) = 0;
  virtual void  visit(const ASTidentFuncs *node, void * data) = 0;
  virtual void  visit(const ASTpommeStatic *node, void * data) = 0;
  virtual void  visit(const ASTsnil *node, void * data) = 0;
  virtual void  visit(const ASTpommePublic *node, void * data) = 0;
  virtual void  visit(const ASTpommePrivate *node, void * data) = 0;
  virtual void  visit(const ASTpommeProtected *node, void * data) = 0;
  virtual void  visit(const ASTvinil *node, void * data) = 0;
  virtual void  visit(const ASTpommeOverride *node, void * data) = 0;
  virtual void  visit(const ASTonil *node, void * data) = 0;
  virtual void  visit(const ASTpommeEnum *node, void * data) = 0;
  virtual void  visit(const ASTpommeExtendsEnum *node, void * data) = 0;
  virtual void  visit(const ASTpommeModdedEnum *node, void * data) = 0;
  virtual void  visit(const ASTdeclenums *node, void * data) = 0;
  virtual void  visit(const ASTennil *node, void * data) = 0;
  virtual void  visit(const ASTenumassign *node, void * data) = 0;
  virtual void  visit(const ASTenumdefault *node, void * data) = 0;
  virtual void  visit(const ASTpommeGlobalFunction *node, void * data) = 0;
  virtual void  visit(const ASTpommeGlobalFunctionNative *node, void * data) = 0;
  virtual void  visit(const ASTinstrs *node, void * data) = 0;
  virtual void  visit(const ASTinil *node, void * data) = 0;
  virtual void  visit(const ASTincrementPre *node, void * data) = 0;
  virtual void  visit(const ASTdecrementPre *node, void * data) = 0;
  virtual void  visit(const ASTpommeReturn *node, void * data) = 0;
  virtual void  visit(const ASTpommeWhile *node, void * data) = 0;
  virtual void  visit(const ASTpommeBreak *node, void * data) = 0;
  virtual void  visit(const ASTpommeIf *node, void * data) = 0;
  virtual void  visit(const ASTpommePrint *node, void * data) = 0;
  virtual void  visit(const ASTpommeSwitch *node, void * data) = 0;
  virtual void  visit(const ASTassignement *node, void * data) = 0;
  virtual void  visit(const ASTaddeq *node, void * data) = 0;
  virtual void  visit(const ASTminuseq *node, void * data) = 0;
  virtual void  visit(const ASTdiveq *node, void * data) = 0;
  virtual void  visit(const ASTmulteq *node, void * data) = 0;
  virtual void  visit(const ASToreq *node, void * data) = 0;
  virtual void  visit(const ASTandeq *node, void * data) = 0;
  virtual void  visit(const ASTshiftleq *node, void * data) = 0;
  virtual void  visit(const ASTshiftreq *node, void * data) = 0;
  virtual void  visit(const ASTincrementPost *node, void * data) = 0;
  virtual void  visit(const ASTdecrementPost *node, void * data) = 0;
  virtual void  visit(const ASTpommeCases *node, void * data) = 0;
  virtual void  visit(const ASTpommeDefault *node, void * data) = 0;
  virtual void  visit(const ASTswinil *node, void * data) = 0;
  virtual void  visit(const ASTpommeCase *node, void * data) = 0;
  virtual void  visit(const ASTlistexp *node, void * data) = 0;
  virtual void  visit(const ASTexnil *node, void * data) = 0;
  virtual void  visit(const ASTpommeVariable *node, void * data) = 0;
  virtual void  visit(const ASTpommeConstant *node, void * data) = 0;
  virtual void  visit(const ASTpommeArray *node, void * data) = 0;
  virtual void  visit(const ASTomega *node, void * data) = 0;
  virtual void  visit(const ASTheaders *node, void * data) = 0;
  virtual void  visit(const ASTenil *node, void * data) = 0;
  virtual void  visit(const ASTheader *node, void * data) = 0;
  virtual void  visit(const ASTvoidType *node, void * data) = 0;
  virtual void  visit(const ASTpommeDestructor *node, void * data) = 0;
  virtual void  visit(const ASTpommeAnd *node, void * data) = 0;
  virtual void  visit(const ASTpommeOr *node, void * data) = 0;
  virtual void  visit(const ASTpommeEQ *node, void * data) = 0;
  virtual void  visit(const ASTpommeNEQ *node, void * data) = 0;
  virtual void  visit(const ASTpommeGT *node, void * data) = 0;
  virtual void  visit(const ASTpommeGET *node, void * data) = 0;
  virtual void  visit(const ASTpommeLT *node, void * data) = 0;
  virtual void  visit(const ASTpommeLET *node, void * data) = 0;
  virtual void  visit(const ASTpommeAdd *node, void * data) = 0;
  virtual void  visit(const ASTpommeMinus *node, void * data) = 0;
  virtual void  visit(const ASTpommeShiftR *node, void * data) = 0;
  virtual void  visit(const ASTpommeShiftL *node, void * data) = 0;
  virtual void  visit(const ASTpommeMult *node, void * data) = 0;
  virtual void  visit(const ASTpommeDiv *node, void * data) = 0;
  virtual void  visit(const ASTpommeModulo *node, void * data) = 0;
  virtual void  visit(const ASTpommeUnary *node, void * data) = 0;
  virtual void  visit(const ASTpommeNot *node, void * data) = 0;
  virtual void  visit(const ASTpommeTilde *node, void * data) = 0;
  virtual void  visit(const ASTpommeNew *node, void * data) = 0;
  virtual void  visit(const ASTpommeTrue *node, void * data) = 0;
  virtual void  visit(const ASTpommeFalse *node, void * data) = 0;
  virtual void  visit(const ASTpommeNull *node, void * data) = 0;
  virtual void  visit(const ASTlistacces *node, void * data) = 0;
  virtual void  visit(const ASTacnil *node, void * data) = 0;
  virtual void  visit(const ASTaccessTab *node, void * data) = 0;
  virtual void  visit(const ASTaccessMethode *node, void * data) = 0;
  virtual ~PommeLexerVisitor() { }
};
class PommeLexerDefaultVisitor : public PommeLexerVisitor {
public:
  virtual void  defaultVisit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const SimpleNode *node, void * data) {
    defaultVisit(node, data);
}
  virtual void  visit(const ASTinput *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTident *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTidentOp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeInt *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeFloat *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeString *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTscopes *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTscinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeTypeDef *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeClassChild *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeModdedClass *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdecls *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeMethode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeMethodeNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTidentFuncs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeStatic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTsnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommePublic *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommePrivate *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeProtected *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTvinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeOverride *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTonil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeExtendsEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeModdedEnum *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdeclenums *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTennil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTenumassign *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTenumdefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeGlobalFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeGlobalFunctionNative *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTinstrs *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTincrementPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdecrementPre *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeReturn *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeWhile *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeBreak *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeIf *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommePrint *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeSwitch *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTassignement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTaddeq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTminuseq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdiveq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTmulteq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASToreq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTandeq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTshiftleq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTshiftreq *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTincrementPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTdecrementPost *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeCases *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeDefault *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTswinil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeCase *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTlistexp *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTexnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeVariable *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeConstant *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeArray *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTomega *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTheaders *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTenil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTheader *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTvoidType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeDestructor *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeAnd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeOr *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeNEQ *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeGT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeGET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeLT *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeLET *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeAdd *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeMinus *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeShiftR *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeShiftL *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeMult *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeDiv *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeModulo *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeUnary *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeNot *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeTilde *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeNew *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeTrue *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeFalse *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTpommeNull *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTlistacces *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTacnil *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTaccessTab *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTaccessMethode *node, void * data) {
    defaultVisit(node, data);
  }
  ~PommeLexerDefaultVisitor() { }
};
}
#endif
/* JavaCC - OriginalChecksum=cc2e28e4747ff41a11404c4b41ce1e91 (do not edit this line) */
